Вопросы по питону:

Изменяемые и не изменяемы типы:

Изменяемые:
list,set,dict

Неизменяемые:
int,float,bool,string,tuple(кортеж)

В кортеже можно изменить значение объекта, но сам объект ихменить нельзя. Например если объектом кортежа является список, то список изменит  нельзя, а значения в списке можно

Проверить тип можно функцией type()



Как в Python управляется память?
Память в Python управляется приватным пространством кучи Python. 
В ней расположены все объекты и структуры данных Python. Об этой куче заботится сам интерпретатор Python, а программист не имеет к ней доступа.


Генератор

почему лист генератора 

Генераторы Python – это функции, которые возвращают объект обхода и используются для создания итераторов, просматривают сразу все элементы.
 Генератор также может быть выражением, синтаксис которого аналогичен пониманию списка в Python. Создание итерации в Python сопряжено с большими трудностями; 
нам нужно реализовать методы __iter __ () и __next __ () для отслеживания внутренних состояний. Создание итераторов – длительный процесс.
найдено на pythonpip.ru

Итератор

Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз.
 С точки зрения Python - это любой объект, у которого есть метод__ next__. 
Этот метод возвращает следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились.
 Кроме того, итератор запоминает, на каком объекте он остановился в последнюю итерацию.


Декоратор — паттерн проектирования, при использовании которого класс или функция изменяет или дополняет функциональность другого класса или функции
 без использования наследования или прямого изменения исходного кода. 
В Python декораторы представляют собой функции или любые вызываемые объекты, которые принимают на вход 
набор необязательных аргументов и функцию или класс и возвращают функцию или класс
 а декораторы могут использовать исключительно для расширения функционала своих разработок. Всё это — очень общие утверждения, поэтому перейдём к примерам.

В Python декораторы используются, в основном, для декорирования функций (или, соответственно, методов).
 Возможно, одним из самых распространённых декораторов является декоратор @property




Контекст менеджер - класс, в котором реализованы два класса enter и exit 

__enter__() - отрабатывает в момент создания объекта менеджера контекста 

__exit__() - отрабатывает в момент завершения работы мененджера контекста или возникновения исключения 

with <менеджер контекста> as <переменная>:
	список каких-то конструкций языка Python


сет это хэш таблица?
скопируются 


with in python прочитать

Декоратор @property облегчает создание свойств в классах Python. 
Свойства выглядят как обычные атрибуты (поля) класса, но при их чтении вызывается геттер (getter), п
ри записи – сеттер (setter), а при удалении – делитер (deleter). Геттер и делитер опциональны.