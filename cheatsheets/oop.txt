Каковы основные концепции ООП?
Основными концепциями ООП являются:


Конструктор

Конструктор имеет то же имя, что и класс. Конструктор также является особым видом метода. Он используется для инициализации объектов класса

Типы конструкторов
Типы конструкторов зависят от языка:

Частный конструктор.
Конструктор по умолчанию.
Конструктор копирования.
Статический конструктор.
Параметризованный конструктор.

Что такое конструктор копирования?
Конструктор копирования в основном создает объекты путем копирования переменных из другого объекта того же класса. 
Основной задачей конструктора копирования является создание нового объекта из существующего.




Наследование
Инкапсуляция
Полиморфизм
Абстракция


Инкапсуляция
Под инкапсуляцией в объектно-ориентированном программировании понимается упаковка данных и методов для их обработки вместе, т. е. в классе. 
В Python инкапсуляция реализуется как на уровне классов, так и объектов. 
В ряде других языков, например в Java, под инкапсуляцией также понимают сокрытие свойств и методов, в результате чего они становятся приватными. 
Это значит, что доступ к ним ограничен либо пределами класса, либо модуля.



Инкапсуляция является частью концепции ООП. Она относится к объединению данных с методами, которые работают с этими данными.
 Это также помогает ограничить любой прямой доступ к некоторым компонентам объекта.




Абстракция 
Абстракция – это концепция ООП для построения структуры объектов реального мира. 
Она «показывает» только существенные атрибуты и «прячет» ненужную информацию от посторонних глаз. 
Основная цель абстракции – скрыть ненужные детали от пользователей. Это одна из самых важных концепций ООП.

Абстрагирование означает выделение значимой информации и исключение из рассмотрения незначимой. 
В ООП рассматривают лишь абстракцию данных (нередко называя её просто «абстракцией»),
 подразумевая набор наиболее значимых характеристик объекта, доступных остальной программе.

Полиморфизм

свойство системы, позволяющее использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта

Что такое полиморфизм?
Полиморфизм является одним из наиболее используемых и основных понятий в языках ООП. 
Полиморфизм – концепция, согласно которой различные классы могут использоваться с одним и тем же интерфейсом. 
Каждый из этих классов может иметь свою собственную реализацию интерфейса.

25. Что такое статический полиморфизм?
Статический полиморфизм или статическое связывание – это один из видов полиморфизма, который возникает во время компиляции. 
Примером полиморфизма во время компиляции является: перегрузка методов.

26. Что такое динамический полиморфизм?
Динамический полиморфизм, динамическое связывание или полиморфизм во время выполнения – это также часть полиморфизма,
 который в основном реализуется во время выполнения программы. Пример полиморфизма во время выполнения программы: переопределение метода.



Что такое наследование?
Если вы порождаете класс от другого класса, это называется наследованием.

Дочерний класс наследует все публичные и защищенные свойства и методы от родительского класса. 
Дочерний класс также может иметь свои собственные свойства и методы. Наследуемый класс определяется с помощью ключевого слова extends.

Множественное наследование:

Если класс наследует более одного базового класса.
Пример: класс, объясняющий ребенка. Этот класс – ребенок – наследует от двух базовых классов, которыми являются мать и отец.

Многоуровневое наследование:

Если класс наследуется от другого класса, который сам является подклассом какого–либо другого базового класса.
Пример: класс под названием спортивный велосипед, который наследуется от базового класса велосипед. 
В свою очередь, класс велосипед наследуется от другого класса транспортное средство.

19. Что такое гибридное наследование?
Сочетание множественного и многоуровневого наследования известно как гибридное наследование.

20. Что такое иерархическое наследование?
Когда один базовый класс имеет более одного подкласса. Например, класс фруктов может иметь в качестве подклассов «яблоко», «манго» и т. д.

21. Каковы ограничения наследования?
Эти ограничения увеличивают время выполнения и трудозатраты и требуют переходов от одного класса к другому. 
Родительский класс и дочерний класс всегда тесно связаны. Внесение изменений в программу потребует изменений как в родительском, так и в дочернем классе. 
Наследование требует тщательной реализации, иначе это приведет к неправильным результатам.


Синтаксис –

class derived-class(base class):  
    <class-suite>
</class-suite>
Источник: https://pythonpip.ru/osnovy/osnovy-nasledovaniya-v-python




34. Проведите различие между абстракцией данных и инкапсуляцией
Абстракция:

Решает проблему на уровне проектирования.
Помогает скрыть детали реализации.
Инкапсуляция:

Решает проблему на уровне реализации.
Обертывает код и данные в единое целое и помогает скрыть их от посторонних глаз



Что такое обработка исключений?
Обработка исключений в объектно-ориентированном программировании является наиболее важной концепцией. 
Она используется для управления ошибками. Обработчик исключений помогает выбрасывать ошибки, а затем перехватывать их для дальнейшего решения.

В чем разница между ошибкой и исключением?
Ошибка: в основном относится к проблеме, и эти проблемы не должны возникать в приложениях.

Исключение: в основном это условие, которое приложение может попытаться выполнить.


Что такое блок try/catch?
Блок try/catch помогает обрабатывать исключения. Блок tryобъясняет набор утверждений, в которых может возникнуть ошибка. 
Блок catch в основном перехватывает исключение.

Что такое блок finally?
Блок finally выполняется, когда блок try завершается, а также выполняется даже в случае возникновения неожиданного исключения. 
Блок finally обычно содержит какую–то важную часть программы.